Hello,

Im looking to implement a plugin that print data contain into a JSON model
of a dashboard. I've read the doc and find some information at "https://grafana.com/docs/grafana/latest/reference/dashboard/"
But when i've make a test dashboard and export his JSON model some
information are not present inside. For exemple the timepicker is represente onli by:
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  }
But in the doc more information can be found as collapse, status, type...
I've find the JSON model of my dashboard in setting and JSON model.
If is possible where can I find the complet model or it's just some data
That have been remove?
Thanks to you.



    {/*<div>
      <ul>
        {arrayKey.map((key : string) => {
          return (
            <li> {key[0]} : {key[1]} </li>
          );
        })}
      </ul>
      </div>*/}



return (
      <div
          style={{
          //position: 'relative',
          width,
          height,
        }}
      >
        <Container>
          <Row>            
            <Col>
              <h3>Panel info v0.1</h3>
              <h4>id: {objectJSON.id} </h4>ok
              <h4>uid: {objectJSON.uid}</h4>ok
              <h4>title: {objectJSON.title} </h4>ok
              <h4>Description: {objectJSON.description}</h4>
              <h4>tags: {objectJSON.tags.map((tag: string) => {
                return (
                  <div> {tag} </div>
                );
              } )} </h4>
              <h4>style: {objectJSON.style} </h4>ok
              <h4>timezone: {objectJSON.timezone} </h4>ok
              <h4>editable: {objectJSON.editable.toString()} </h4>
              <h4>hideControls: {objectJSON.hideControls} </h4>
              <h4>graphToolTip: {objectJSON.graphToolTip} </h4>
              <h4>pannels: </h4>
              <div>
                {objectJSON.panels.map((panel: any) => {
                  return (
                    <div>
                      <h4>datasource: {panel.datasource} </h4>
                      <h4>gridPos: 
                        <h3>h: {panel.gridPos.h} </h3>
                        <h3>w: {panel.gridPos.w} </h3>
                        <h3>x: {panel.gridPos.x} </h3>
                        <h3>y: {panel.gridPos.y} </h3>
                      </h4>
                      <h4>id: {panel.id} </h4>
                      <h4>option: TODO</h4>
                      <h4>mode: {panel.mode} </h4>
                      <h4>title: {panel.title} </h4>
                      <h4>type: {panel.type} </h4>
                    </div>
                  );
                })}
              </div>
              <h4>time:</h4>ok
                  <div>
                    <div>from: {objectJSON.time.from} </div>
                    <div>to: {objectJSON.time.to} </div>
                  </div>
              <h4>timepicker:</h4>ok
              <div>
                <div>
                  <div>collapse: {objectJSON.timepicker.collapse} </div>
                  <div>enable: {objectJSON.timepicker.enable} </div>
                  <div>notice: {objectJSON.timepicker.notice} </div>
                  <div>now: {objectJSON.timepicker.now} </div>
                  <div>refresh_intervals: {objectJSON.timepicker.refresh_intervals.map((refresh_intervals: string) => {
                    return (
                      <div> {refresh_intervals} </div>
                    );
                  })} </div>
                  <div>status: {objectJSON.timepicker.status} </div>
                  <div>time_options: {objectJSON.timepicker.time_options.map((time_options: string) => {
                    return (
                      <div> {time_options} </div>
                    );
                  })} </div>
                  <div>type: {objectJSON.timepicker.type} </div>
                </div>
              </div>
              <h4>templating: </h4>
              <div>enable: {objectJSON.templating.enable}</div>
              <div> {objectJSON.templating.list.map((templating_list: any) => {
                return (
                  <div>
                    <div>allFormat: {templating_list.allFormat} </div>
                    <div>current:</div>
                   
                    <div>text: {templating_list.current.text} </div>
                    <div>value: {templating_list.current.value} </div>
                    <div>datasource: {templating_list.datasource} </div>
                    <div>includeAll: {templating_list.includeAll.toString()} </div>
                    <div>name: {templating_list.name} </div>
                    <div>options: </div>
                    <div> {templating_list.options.map((templating_option: any) => {
                      return (
                        <div>
                          <div>selected: {templating_option.selected} </div>
                          <div>text: {templating_option.text} </div>
                          <div>value: {templating_option.value} </div>
                        </div>
                      );
                    } )} </div>
                    <div>query: {templating_list.query} </div>
                    <div>refresh: {templating_list.refresh.toString()} </div>
                    <div>type: {templating_list.type} </div>
                  </div>
                );
              })} </div>
             OK <h4>Annotations: {objectJSON.annotations.list.map((annotations: any, i: string | number | undefined) => {
                return (
                  <div key={i}>
                    <div>
                      <h5>buildIN: {annotations.buildIN}</h5>
                      <h5>datasource: {annotations.datasource}</h5>
                      <h5>enable: {annotations.enable.toString()} </h5>
                      <h5>hide: {annotations.hide.toString()} </h5>
                      <h5>iconColor: {annotations.iconColor} </h5>
                      <h5>name: {annotations.name} </h5>
                      <h5>type: {annotations.type} </h5>
                    </div>
                  </div>
                );
              }) } </h4>
              <h4>refresh: {objectJSON.refresh} </h4>
              <h4>schemaVersion: {objectJSON.schemaVersion} </h4>
              <h4>version: {objectJSON.version} </h4>
              <h4>links: ok
                {objectJSON.links.map((link: string) => {
                  return (
                    <h3> {link} </h3>
                  );
                })}
              </h4>
            </Col>
          </Row>
        </Container>
      </div>
    );